1. Introduction to Git and GitHub

Git is a version control system that tracks code changes, helping developers manage code history and collaborate effectively.

GitHub is a platform for hosting Git repositories, enabling features like pull requests, issue tracking, and continuous integration for collaborative development.

Installing Git

Depending on your system, here’s how to get Git installed:

Windows: Download from git-scm.com.

macOS: Open a terminal and run: brew install git

Linux: Run this in your terminal: sudo apt install git


Setting Up Your Identity

Once Git is installed, set up your name and email so that Git can identify you in each of your changes:

git config --global user.name "Your Name"
git config --global user.email "your_email@example.com"

3. Everyday Git Commands

Starting a New Project with Git

To start tracking a project with Git, open the project folder in your terminal and type:

git init

This will create a Git repository in your project.

Cloning an Existing Project

To download a copy of an existing project, use:

git clone <repository-url>

Replace <repository-url> with the actual URL of the project you want.

Working with Git

Staging Changes: This is like “lining up” changes for a snapshot. You can add specific files or everything at once.

git add <file>  # Add specific files
git add .       # Add all changes

Saving Changes (Commit): Think of this like taking a snapshot. Add a message to remember what you changed.

git commit -m "Explain what you did"

Seeing Your History:

git log             # Detailed history
git log --oneline   # A quick summary


4. Branching and Merging

Branches are like separate workspaces within your project, letting you experiment safely.

Create a Branch:

git branch <branch-name>

Switch to a Branch:

git checkout <branch-name>

Create and Switch to a New Branch:

git checkout -b <branch-name>

Merging Branches: When you’re ready to bring your changes back to the main branch:

git merge <branch-name>


5. Working with Remote Repositories

Linking Your Project to GitHub

To connect your project to GitHub, add a “remote” link to your GitHub repo:

git remote add origin <repository-url>

Pushing and Pulling Changes

Pushing Changes: This sends your changes to GitHub.

git push origin <branch-name>

Pulling Changes: This gets the latest updates from GitHub to your local project.

git pull origin <branch-name>

Fetching: Downloads changes from GitHub but doesn’t merge them automatically.

git fetch


6. Undoing Mistakes

Mistakes happen! Here’s how to undo different kinds of mistakes.

Unstage a File:

git reset <file>

Undo a Specific Commit:

git revert <commit-id>

Reset to an Earlier Commit:

git reset --hard <commit-id>


7. GitHub-Specific Features

Forking

When you fork a project, you create your own copy on GitHub. It’s a great way to experiment without changing the original project.

Pull Requests

Pull requests let you propose changes. After creating one, the project’s owner can review and discuss your changes before adding them to the project.

Issues

GitHub Issues are used to keep track of bugs, tasks, and feature requests for the project.

8. Handy Extras

Tagging Important Points

You can “tag” certain points in your project, like marking a release version:

git tag <tag-name>
git push origin <tag-name>

Stashing Changes

If you need to set your current work aside but aren’t ready to commit, use:

git stash       # Save current changes
git stash apply # Apply stashed changes later

Shortcuts (Aliases)

If you use certain commands often, set up aliases for them:

git config --global alias.co checkout
git config --global alias.br branch
git config --global alias.cm commit

9. Pushing Your Documentation to GitHub

Finally, let’s push this documentation to GitHub as a README.md file:

1. Create a file called README.md and add the content above.


2. Then, in your terminal:

git add README.md
git commit -m "Add Git and GitHub documentation"
git push origin main

